@model CareConnect.Models.UserViewModel

@{
    ViewData["Title"] = "Dashboard";

    Layout = "_Layout";
}



@*<h1 id="reportTitle">Daewoo FastEx Complaint Progress Report</h1>*@

<div class="dashboard">
    <div class="box central">
        <h4>Central</h4>
        <span class="count" id="central-count"></span>
    </div>
    <div class="box north">
        <h4>North</h4>
        <span class="count" id="north-count"></span>
    </div>
    <div class="box south">
        <h4>South</h4>
        <span class="count" id="south-count"></span>
    </div>
    <div class="box total">
        <h4>Total Count</h4>
        <span class="count" id="total-count"></span>
    </div>
    <div class="box in-progress">
        <h4>In Progress</h4>
        <span class="count" id="pending-count"></span>
    </div>
    <div class="box overdue">
        <h4>OPS Closed</h4>
        <span class="count" id="opsclose-count"></span>
    </div>
  @*  <div class="box overdue">
        <h4>Closed</h4>
        <span class="count" id="closecount"></span>
    </div>*@
</div>


@*<h2>Role ID: @ViewData["RoleID"]</h2>
    <h2>User Name: @ViewBag.username</h2>*@
<div class="col-3">
    <label for="chartType">Select Chart Type:</label>
    <select class="form-control" id="chartType" onchange="updateChart()">
        <option value="bar">Bar Chart</option>
        <option value="line">Line Chart</option>
        <option value="pie">Pie Chart</option>
        <!-- Add more options for other chart types you want to support -->
    </select>
</div>

<br />


<div class="row">

    <div class="col-6">
        <h4>Ticket Catagories (Month)</h4>
    </div>
    <div class="col-6">
        <h4>Complaints (Month)</h4>
    </div>
</div>

<div class="row">
    <div class="col-6">
        <canvas id="complaintsChartall" width="800" height="200"></canvas>
    </div>
    <div class="col-6">
        <canvas id="complaintsChartcomplaints" width="800" height="200"></canvas>

    </div>
</div>
<br />






<div class="row">

    <div class="col-6">
        <h4>Info (Month)</h4>
    </div>
    <div class="col-6">
        <h4>Service Request (Month)</h4>
    </div>
</div>

<div class="row">
    <div class="col-6">
        <canvas id="complaintsChartinfo" width="800" height="200"></canvas>
    </div>
    <div class="col-6">
        <canvas id="complaintsservicerequest" width="800" height="200"></canvas>

    </div>
</div>
<br />









<div class="row">

    <div class="col-6">
        <h4>Products (Daily) </h4>
    </div>
    <div class="col-6">
        <h4>Ticket Types (Daily)</h4>
    </div>
</div>

<div class="row">
    <div class="col-6">
        <canvas id="productsChart" width="800" height="200"></canvas>
    </div>
    <div class="col-6">
        <canvas id="tickettypes" width="800" height="200"></canvas>
    </div>
</div>
<br />

<div class="chatbot-icon" id="chatbot-icon">
    <i class="fas fa-comment"></i>
</div>

<div class="chatbot-popup" id="chatbot-popup">
    <div class="chat-header">
        Chat with ChatBot
        @*<span class="close-btn" id="close-btn">&times;</span>*@
    </div>
    <div class="chat-messages" id="chat-messages"></div>
    <input type="text" id="user-input" placeholder="Type a message...">
    <div class="suggested-text">
        <button class="suggested-btn" onclick="sendMessage('Hello')">Hello</button>
        <button class="suggested-btn" onclick="sendMessage('How can you help?')">How can you help?</button>
    </div>
</div>
<!-- Start of HubSpot Embed Code -->
<!--<script type="text/javascript" id="hs-script-loader" async defer src="//js-na1.hs-scripts.com/43368633.js"></script>-->
<!-- End of HubSpot Embed Code -->
@section Scripts {
    <script src="~/js/chatbot.js"></script>
}
    <!-- Include SweetAlert CSS and JS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.16/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.16/dist/sweetalert2.all.min.js"></script>

    <link rel="stylesheet" href="~/css/chatbot.css">

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>

        // Get the current date
        var currentDate = new Date();

        // Format the date as desired (e.g., "August 9, 2023")
        var formattedDate = currentDate.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        // Get the heading element by its ID
        //var headingElement = document.getElementById("reportTitle");

        //// Append the formatted date to the heading text
        //headingElement.innerHTML += " - " + formattedDate;
        // Define a variable to hold the chart instance
        var myChartall;
        var myChartcomplaints;
        var myChartinfo;
        var myChartservicerequest;
        var myChartregion;
        var myCharttickettypes;
        var myChartproducts;

        // Function to make the AJAX request and update the chart
        function updateChart() {
            // Get the selected chart type from the drop-down
            var selectedChartType = document.getElementById('chartType').value;
            debugger
            fetch('/Home/GetChartData') // Replace 'Dashboard' with the name of your controller
                .then(response => {
                    debugger
                    if (!response.ok) {
                        throw new Error('');
                    }
                    debugger
                    return response.json();
                })
                .then(data => {
                    debugger
                    var ctxall = document.getElementById('complaintsChartall').getContext('2d');
                    var ctxcomplaints = document.getElementById('complaintsChartcomplaints').getContext('2d');
                    var ctxinfo = document.getElementById('complaintsChartinfo').getContext('2d');
                    var ctxservicerequest = document.getElementById('complaintsservicerequest').getContext('2d');
                    var ctxtickettypes = document.getElementById('tickettypes').getContext('2d');
                    var ctxproducts = document.getElementById('productsChart').getContext('2d');

                    // Destroy the previous chart instance if it exists
                    if (myChartall) {
                        myChartall.destroy();
                    }

                    if (myChartcomplaints) {
                        myChartcomplaints.destroy();
                    }
                    if (myChartinfo) {
                        myChartinfo.destroy();
                    }
                    if (myChartservicerequest) {
                        myChartservicerequest.destroy();
                    }
                    if (myCharttickettypes) {
                        myCharttickettypes.destroy();
                    }

                    if (myChartproducts) {
                        myChartproducts.destroy();
                    }
                    debugger
                    var chartDataall = data.chartDataAll;
                    var chartDatacomplaints = data.chartDatComplaint;
                    var chartDatainfo = data.chartDataInfo;
                    var chartDataservicerequest = data.chartDataServiceRequest;
                    var chartdataregion = data.chartDataregion;
                    var chartDatatickettype = data.chartDatatickettype;
                    var chartDataproducts = data.chartDataproducts;

                    debugger
                    chartdataregion.forEach(item => {
                        if (item.region_name === 'CENTRAL') {
                            document.getElementById('central-count').textContent = item.percentage;
                        } else if (item.region_name === 'NORTH') {
                            document.getElementById('north-count').textContent = item.percentage;
                        } else if (item.region_name === 'SOUTH') {
                            document.getElementById('south-count').textContent = item.percentage;
                        }
                    });
                    debugger
                    const commonBarColors = [
                        'rgba(75, 192, 192, 0.6)', // Color for the first chart
                        'rgba(255, 99, 132, 0.6)', // Color for the second chart
                        'rgba(54, 162, 235, 0.6)', // Color for the third chart
                        'rgba(255, 206, 86, 0.6)', // Color for the fourth chart
                        'rgba(255, 159, 64, 0.6)', // Color for the fifth chart
                        'rgba(128, 0, 128, 0.6)', // New color for the sixth chart
                        // Add more colors for additional charts
                    ];
                    const commonBorderColors = [
                        'rgba(75, 192, 192, 1)',
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(128, 0, 128, 1)', // New border color for the sixth chart
                        // Add more colors for additional charts
                    ];
                    switch (selectedChartType) {

                        case 'bar':
                            /*  --chart 1 ALL---*/
                            myChartall = new Chart(ctxall, {
                                type: 'bar',
                                data: {
                                    labels: chartDataall.map(item => item.categoryDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDataall.map(item => item.totalTicket),
                                        backgroundColor: commonBarColors[0], // Bar fill color
                                        borderColor: commonBorderColors[0], // Bar border color
                                        borderWidth: 2,
                                        barPercentage: 0.7,
                                        minBarLength: 5,
                                    }]
                                },
                                options: {
                                    scales: {
                                        y: {
                                            beginAtZero: true,
                                            ticks: {
                                                stepSize: 1, // Customize the tick interval on the y-axis
                                            }
                                        }
                                    },
                                    animation: {
                                        duration: 1000,
                                        easing: 'easeOutQuart',
                                        delay: (context) => context.dataIndex * 50,
                                        from: 'bottom',
                                    },
                                    plugins: {
                                        legend: {
                                            display: true,
                                            labels: {
                                                usePointStyle: true,
                                            }
                                        },
                                        title: {
                                            display: true,
                                            text: 'Total Tickets by Category', // Chart title
                                            fontSize: 16,
                                            padding: {
                                                top: 10,
                                                bottom: 10,
                                            },
                                        }
                                    }
                                }
                            });
                            /*     ---chart 2  Complaints-----*/
                            myChartcomplaints = new Chart(ctxcomplaints, {
                                type: 'bar',
                                data: {
                                    labels: chartDatacomplaints.map(item => item.issueTypeDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDatacomplaints.map(item => item.totalTicket),
                                        borderWidth: 1,
                                        backgroundColor: commonBarColors[1], // Bar fill color
                                        borderColor: commonBorderColors[1], // Bar border color
                                        barPercentage: 0.5,
                                        minBarLength: 5,
                                    }]
                                },
                                options: {
                                    //indexAxis: 'y',
                                    scales: {
                                        y: {
                                            ticks: {
                                                stepSize: 1, // Customize the tick interval on the y-axis
                                            },
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });



                            /*     ---chart 3  info-----*/
                            myChartinfo = new Chart(ctxinfo, {
                                type: 'bar',
                                data: {
                                    labels: chartDatainfo.map(item => item.issueTypeDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDatainfo.map(item => item.totalTicket),
                                        borderWidth: 1,
                                        backgroundColor: commonBarColors[2], // Bar fill color
                                        borderColor: commonBorderColors[2], // Bar border color
                                        barPercentage: 0.5,
                                        minBarLength: 5,
                                    }]
                                },
                                options: {
                                    //indexAxis: 'y',
                                    scales: {
                                        y: {
                                            ticks: {
                                                stepSize: 1, // Customize the tick interval on the y-axis
                                            },
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });

                            /*----chart 4 service request -----*/

                            myChartservicerequest = new Chart(ctxservicerequest, {
                                type: 'bar',
                                data: {
                                    labels: chartDataservicerequest.map(item => item.issueTypeDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDataservicerequest.map(item => item.totalTicket),
                                        borderWidth: 1,
                                        backgroundColor: commonBarColors[3], // Bar fill color
                                        borderColor: commonBorderColors[3], // Bar border color
                                        barPercentage: 0.5,
                                        minBarLength: 5,
                                    }]
                                },
                                options: {
                                    //indexAxis: 'y',
                                    scales: {
                                        y: {
                                            ticks: {
                                                stepSize: 1, // Customize the tick interval on the y-axis
                                            },
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });

                            debugger
                            /*----chart 5 Ticket Types -----*/

                            myCharttickettypes = new Chart(ctxtickettypes, {
                                type: 'bar',
                                data: {
                                    labels: chartDatatickettype.map(item => item.ticketType),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDatatickettype.map(item => item.totalTicket),
                                        borderWidth: 1,
                                        backgroundColor: commonBarColors[4], // Bar fill color
                                        borderColor: commonBorderColors[4], // Bar border color
                                        barPercentage: 0.5,
                                        minBarLength: 5,
                                    }]
                                },
                                options: {
                                    //indexAxis: 'y',
                                    scales: {
                                        y: {
                                            ticks: {
                                                stepSize: 1, // Customize the tick interval on the y-axis
                                            },
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });



                            /*----chart 6 Products -----*/

                            myChartproducts = new Chart(ctxproducts, {
                                type: 'bar',
                                data: {
                                    labels: chartDataproducts.map(item => item.products),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDataproducts.map(item => item.totalTicket),
                                        borderWidth: 1,
                                        backgroundColor: commonBarColors[5], // Bar fill color
                                        borderColor: commonBorderColors[5], // Bar border color
                                        barPercentage: 0.5,
                                        minBarLength: 5,
                                    }]
                                },
                                options: {
                                    //indexAxis: 'y',
                                    scales: {
                                        y: {
                                            ticks: {
                                                stepSize: 1, // Customize the tick interval on the y-axis
                                            },
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });


                            debugger
                            break;
                        case 'line':
                            myChartall = new Chart(ctxall, {
                                type: 'line',
                                data: {
                                    labels: chartDataall.map(item => item.categoryDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDataall.map(item => item.totalTicket),
                                        borderWidth: 1,

                                    }]
                                },
                                options: {
                                    //indexAxis: 'y',
                                    scales: {
                                        y: {
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });

                            /*     ---chart 2  Complaints-----*/
                            myChartcomplaints = new Chart(ctxcomplaints, {
                                type: 'line',
                                data: {
                                    labels: chartDatacomplaints.map(item => item.issueTypeDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDatacomplaints.map(item => item.totalTicket),
                                        borderWidth: 1,

                                        barPercentage: 0.5,
                                        minBarLength: 5,
                                    }]
                                },
                                options: {
                                    //indexAxis: 'y',
                                    scales: {
                                        y: {
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });

                            /*     ---chart 3  info-----*/
                            myChartinfo = new Chart(ctxinfo, {
                                type: 'line',
                                data: {
                                    labels: chartDatainfo.map(item => item.issueTypeDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDatainfo.map(item => item.totalTicket),
                                        borderWidth: 1,

                                        barPercentage: 0.5,
                                        minBarLength: 5,
                                    }]
                                },
                                options: {
                                    //indexAxis: 'y',
                                    scales: {
                                        y: {
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });

                            /*----chart 4 service request -----*/

                            myChartservicerequest = new Chart(ctxservicerequest, {
                                type: 'line',
                                data: {
                                    labels: chartDataservicerequest.map(item => item.issueTypeDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDataservicerequest.map(item => item.totalTicket),
                                        borderWidth: 1,

                                        barPercentage: 0.5,
                                        minBarLength: 5,
                                    }]
                                },
                                options: {
                                    //indexAxis: 'y',
                                    scales: {
                                        y: {
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });

                            /*----chart 5 ticket types -----*/

                            myCharttickettypes = new Chart(ctxtickettypes, {
                                type: 'line',
                                data: {
                                    labels: chartDatatickettype.map(item => item.ticketType),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDatatickettype.map(item => item.totalTicket),
                                        borderWidth: 1,

                                        barPercentage: 0.5,
                                        minBarLength: 5,
                                    }]
                                },
                                options: {
                                    //indexAxis: 'y',
                                    scales: {
                                        y: {
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });


                            /*----chart 6 products -----*/

                            myChartproducts = new Chart(ctxproducts, {
                                type: 'line',
                                data: {
                                    labels: chartDataproducts.map(item => item.products),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDataproducts.map(item => item.totalTicket),
                                        borderWidth: 1,

                                        barPercentage: 0.5,
                                        minBarLength: 5,
                                    }]
                                },
                                options: {
                                    //indexAxis: 'y',
                                    scales: {
                                        y: {
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });



                            break;
                        case 'pie':
                            /*----chart 1 all pie  -----*/

                            myChartall = new Chart(ctxall, {
                                type: 'pie',
                                data: {
                                    labels: chartDataall.map(item => item.categoryDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDataall.map(item => item.totalTicket),
                                        borderWidth: 1,
                                    }]
                                },
                                options: {
                                    responsive: true, // Enable resizing of the chart to fit the container
                                    maintainAspectRatio: false, // Disable the aspect ratio to use custom width and height
                                    width: 800, // Set the custom width for the pie chart
                                    height: 400, // Set the custom height for the pie chart
                                    //indexAxis: 'y',

                                }
                            });
                            /*----chart 2 complaints pie  -----*/


                            myChartcomplaints = new Chart(ctxcomplaints, {
                                type: 'pie',
                                data: {
                                    labels: chartDatacomplaints.map(item => item.issueTypeDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDatacomplaints.map(item => item.totalTicket),
                                        borderWidth: 1,
                                    }]
                                },
                                options: {
                                    responsive: true, // Enable resizing of the chart to fit the container
                                    maintainAspectRatio: false, // Disable the aspect ratio to use custom width and height
                                    width: 800, // Set the custom width for the pie chart
                                    height: 400, // Set the custom height for the pie chart
                                    //indexAxis: 'y',

                                }
                            });



                            /*----chart 3 info pie  -----*/

                            myChartinfo = new Chart(ctxinfo, {
                                type: 'pie',
                                data: {
                                    labels: chartDatainfo.map(item => item.issueTypeDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDatainfo.map(item => item.totalTicket),
                                        borderWidth: 1,
                                    }]
                                },
                                options: {
                                    responsive: true, // Enable resizing of the chart to fit the container
                                    maintainAspectRatio: false, // Disable the aspect ratio to use custom width and height
                                    width: 800, // Set the custom width for the pie chart
                                    height: 400, // Set the custom height for the pie chart
                                    //indexAxis: 'y',

                                }
                            });



                            /*----chart 4 service request pie  -----*/
                            myChartservicerequest = new Chart(ctxservicerequest, {
                                type: 'pie',
                                data: {
                                    labels: chartDataservicerequest.map(item => item.issueTypeDescription),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDataservicerequest.map(item => item.totalTicket),
                                        borderWidth: 1,
                                    }]
                                },
                                options: {
                                    responsive: true, // Enable resizing of the chart to fit the container
                                    maintainAspectRatio: false, // Disable the aspect ratio to use custom width and height
                                    width: 800, // Set the custom width for the pie chart
                                    height: 400, // Set the custom height for the pie chart
                                    //indexAxis: 'y',

                                }
                            });



                            /*----chart 5 ticket types  -----*/
                            myCharttickettypes = new Chart(ctxtickettypes, {
                                type: 'pie',
                                data: {
                                    labels: chartDatatickettype.map(item => item.ticketType),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDatatickettype.map(item => item.totalTicket),
                                        borderWidth: 1,
                                    }]
                                },
                                options: {
                                    responsive: true, // Enable resizing of the chart to fit the container
                                    maintainAspectRatio: false, // Disable the aspect ratio to use custom width and height
                                    width: 800, // Set the custom width for the pie chart
                                    height: 400, // Set the custom height for the pie chart
                                    //indexAxis: 'y',

                                }
                            });

                            /*----chart 6 products  -----*/
                            myChartproducts = new Chart(ctxproducts, {
                                type: 'pie',
                                data: {
                                    labels: chartDataproducts.map(item => item.products),
                                    datasets: [{
                                        label: 'Total Tickets',
                                        data: chartDataproducts.map(item => item.totalTicket),
                                        borderWidth: 1,
                                    }]
                                },
                                options: {
                                    responsive: true, // Enable resizing of the chart to fit the container
                                    maintainAspectRatio: false, // Disable the aspect ratio to use custom width and height
                                    width: 800, // Set the custom width for the pie chart
                                    height: 400, // Set the custom height for the pie chart
                                    //indexAxis: 'y',

                                }
                            });


                            break;
                        // Add cases for other chart types you want to support
                        default:
                            break;
                    }
                })
                .catch(error => {
                    debugger

                    // Show SweetAlert error message
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'An error occurred while fetching data "' + error + '"',
                    });

                    //Swal.fire('Error', 'Error fetching data: ' + error, 'error');
                });
        }

        // Call the updateChart function when the page loads to display the default chart
        document.addEventListener('DOMContentLoaded', updateChart);


    </script>



















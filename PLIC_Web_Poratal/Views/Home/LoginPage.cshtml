@{
    ViewData["Title"] = "Dashboard";

    Layout = "_Layout";
}
@*<h1 id="reportTitle">Daewoo FastEx Complaint Progress Report</h1>*@
<br />
<div class="row">
    <!-- left column -->

    <div class="col-md-12 col-lg-12 col-sm-12">
        <!-- jquery validation -->




        <div class="form-group">

            <div class="row">

                <div class="col-lg-1 col-md-1 col-sm-1">
                    <label class="text-secondary font-weight-bold">Date From:</label>

                </div>
                <div class="col-lg-2 col-md-2 col-sm-2">
                    <input type="date" id="datefrom" name="datefrom" class="form-control" autofocus />
                </div>
                <div class="col-lg-1 col-md-1 col-sm-1">
                    <label class="text-secondary font-weight-bold">Date To:</label>

                </div>
                <div class="col-lg-2 col-md-2 col-sm-2">
                    <input type="date" id="dateto" name="dateto" class="form-control" autofocus />
                </div>

                <div class="col-lg-6 col-md-6 col-sm-6">
                    <button class="btn btn-success float-left" id="btnChart">Load Charts</button>
                </div>
            </div>
            <div> <br /></div>
            <span class="text-danger"></span>

        </div>


    </div>
</div>



<div class="dashboard">

    <div class="box total">
        <h4>Total Tickets</h4>
        <span class="count" id="total-count"></span>

    </div>
    <div class="box complaints">
        <h4>Complaints</h4>
        <span class="count" id="total-complaints"></span>
        <br />
        <span class="count" id="percent-complaints"></span>
    </div>
    <div class="box servicerequest">
        <h4>Service Request</h4>
        <span class="count" id="total-servicerequest"></span>
        <br />
        <span class="count" id="percent-servicerequest"></span>
    </div>
    <div class="box info">
        <h4>Info</h4>
        <span class="count" id="total-info"></span>
        <br />
        <span class="count" id="percent-info"></span>
    </div>
    
</div>

<br />
<div class="row">

    <div class="col-6">
        <h4 id=reportTitle>Region Wise - Complaints</h4>
    </div>
    <div class="col-6">
        <h4 id=reportTitle>Complaints By Work Code</h4>
    </div>
</div>


<div class="row">
    <div class="col-6">
        <canvas id="TicketCategoriesPieChart" width="850" height="350"></canvas>
    </div>
    <div class="col-6">
        <canvas id="complaintBarChart" width="850" height="350"></canvas>

    </div>
</div>

<br />
<div class="row">
    <div class="col-6">
        <h4 id=reportTitle>Complaints Stats</h4>
    </div>
    <div class="col-6">
        <h4 id=reportTitle>Products</h4>
    </div>

</div>
<div class="row">
    <div class="col-6">
        <canvas id="complaintstatsPieChart" width="850" height="350"></canvas>

    </div>
    <div class="col-6">
        <canvas id="productBarChart" width="850" height="350"></canvas>
    </div>

</div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.16/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.16/dist/sweetalert2.all.min.js"></script>
<script>
    debugger

    // Get the current date
    var currentDate = new Date();

    // Format the date as desired (e.g., "August 9, 2023")
    var formattedDate = currentDate.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });


    $(document).ready(function () {
        debugger

        // Calculate one week ago date
        var oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate());

        // Format the date in YYYY-MM-DD format
        var formattedDate = oneWeekAgo.toISOString().split('T')[0];

        // Set the default date values in the input fields
        document.getElementById('datefrom').value = formattedDate;
        document.getElementById('dateto').value = new Date().toISOString().split('T')[0]; // Set "Date To" to current date
        debugger
        $('#btnChart').click(function () {
            debugger
            var datefrom = $('#datefrom').val();
            var dateto = $('#dateto').val();
            if (datefrom == "") {
                datefrom = null;
            }
            if (dateto == "") {
                dateto = null;

            } else {

            }
            LoadCharts();
        });
    });
    var myChartall;
    var myChartRegion;
    var myChartcomplaints;
    var myChartinfo;
    var myChartservicerequesttest;
    function LoadCharts() {
        debugger

        var datefrom = $('#datefrom').val();
        var dateto = $('#dateto').val();
        // Create a URL with the parameters
        var url = '/Home/GetChartData2?datefrom=' + datefrom + '&dateto=' + dateto;

        debugger
        fetch(url) // Replace 'Dashboard' with the name of your controller
            .then(response => {
                debugger
                if (!response.ok) {
                    throw new Error('');
                }
                debugger
                return response.json();
            })
            .then(data => {
                debugger
                var ctxall = document.getElementById('TicketCategoriesPieChart').getContext('2d');
                var ctxcomplaints = document.getElementById('complaintBarChart').getContext('2d');
                var ctxproduct = document.getElementById('productBarChart').getContext('2d');
                var ctxcomplaintspie = document.getElementById('complaintstatsPieChart').getContext('2d');


         

                // Destroy the previous chart instance if it exists
                if (myChartall) {
                    myChartall.destroy();
                }

                if (myChartcomplaints) {
                    myChartcomplaints.destroy();
                }

                if (myChartRegion) {
                    myChartRegion.destroy();
                }
                if (myChartinfo) {
                    myChartinfo.destroy();
                }
                if (myChartservicerequesttest) {
                    myChartservicerequesttest.destroy();
                }
                // if (myCharttickettypes) {
                //     myCharttickettypes.destroy();
                // }

                // if (myChartproducts) {
                //     myChartproducts.destroy();
                // }
                debugger
                var chartDataall = data.chartDataAll;
                var chartdataComplaintsregion = data.chartDataComplaintsRegion;
                var chartDatacomplaints = data.chartDatComplaint;
                // var chartDatainfo = data.chartDataInfo;
                // var chartDataservicerequest = data.chartDataServiceRequest;
                var chartdataregion = data.chartDataregion;
                debugger
                var chartDatatotalcount = data.chartDatatotalcount;
                var chartDatainprogress = data.chartDatainprogress;
                var chartDataopsclosed = data.chartDataopsclosed;
                var chartDataclosed = data.chartDataclosed;

                // var chartDatatickettype = data.chartDatatickettype;
                var chartDataproducts = data.chartDataproducts;
                var chartDataComplaintspie = data.chartDatacomplaintspie;

                debugger
                chartdataregion.forEach(item => {
                    if (item.region_name === 'Complaints') {
                        document.getElementById('percent-complaints').textContent = item.percentage;
                    } else if (item.region_name === 'Info') {
                        document.getElementById('percent-info').textContent = item.percentage;
                    } else if (item.region_name === 'Service Request') {
                        document.getElementById('percent-servicerequest').textContent = item.percentage;
                    }
                });


                chartDataall.forEach(item => {
                    if (item.categoryDescription === 'Complaints') {
                        document.getElementById('total-complaints').textContent = item.totalTicket;
                    } else if (item.categoryDescription === 'Info') {
                        document.getElementById('total-info').textContent = item.totalTicket;
                    } else if (item.categoryDescription === 'Service Request') {
                        document.getElementById('total-servicerequest').textContent = item.totalTicket;
                    }
                });
                debugger

                // Assuming you have fetched the data and stored it in the chartdataclosed array

                // Check if chartdataclosed has at least one item
                if (chartDataclosed.length > 0) {
                    // Get the totalTicket value from the first item in the array
                    var totalTicket = chartDataclosed[0].totalTicket;

                    // Update the "Closed" box with the totalTicket value
                    $('#closed-count').text(totalTicket);
                } else {
                    // Handle the case where chartdataclosed is empty
                    $('#closed-count').text('N/A'); // You can display a message like "N/A"
                }
                // Assuming you have fetched the data and stored it in the chartdataclosed array

                // Check if chartdataclosed has at least one item
                if (chartDataopsclosed.length > 0) {
                    // Get the totalTicket value from the first item in the array
                    var totalTicket = chartDataopsclosed[0].totalTicket;

                    // Update the "Closed" box with the totalTicket value
                    $('#opsclosed-count').text(totalTicket);
                } else {
                    // Handle the case where chartdataclosed is empty
                    $('#opsclosed-count').text('N/A'); // You can display a message like "N/A"
                }// Assuming you have fetched the data and stored it in the chartdataclosed array




                // Check if chartdataclosed has at least one item
                if (chartDatainprogress.length > 0) {
                    // Get the totalTicket value from the first item in the array
                    var totalTicket = chartDatainprogress[0].totalTicket;

                    // Update the "Closed" box with the totalTicket value
                    $('#progress-count').text(totalTicket);
                } else {
                    // Handle the case where chartdataclosed is empty
                    $('#progress-count').text('N/A'); // You can display a message like "N/A"
                }// Assuming you have fetched the data and stored it in the chartdataclosed array




                // Check if chartdataclosed has at least one item
                if (chartDatatotalcount.length > 0) {
                    // Get the totalTicket value from the first item in the array
                    var totalTicket = chartDatatotalcount[0].totalTicket;

                    // Update the "Closed" box with the totalTicket value
                    $('#total-count').text(totalTicket);
                } else {
                    // Handle the case where chartdataclosed is empty
                    $('#total-count').text('N/A'); // You can display a message like "N/A"
                }



                const commonBarColors = [
                    'rgba(75, 192, 192, 0.6)', // Color for the first chart
                    'rgba(255, 99, 132, 0.6)', // Color for the second chart
                    'rgba(54, 162, 235, 0.6)', // Color for the third chart
                    'rgba(255, 206, 86, 0.6)', // Color for the fourth chart
                    'rgba(255, 159, 64, 0.6)', // Color for the fifth chart
                    'rgba(128, 0, 128, 0.6)', // New color for the sixth chart
                    // Add more colors for additional charts
                ];
                const commonBorderColors = [
                    'rgba(75, 192, 192, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(128, 0, 128, 1)', // New border color for the sixth chart
                    // Add more colors for additional charts
                ];
                debugger
                myChartRegion = new Chart(ctxall, {
                    type: 'doughnut',
                    data: {
                        labels: chartdataComplaintsregion.map(item => item.region),
                        datasets: [{
                            label: 'Total Tickets',
                            data: chartdataComplaintsregion.map(item => item.totalTicket),
                            borderWidth: 1,
                            backgroundColor: [
                                'rgba(75, 192, 192, 1)',
                                'rgba(255, 99, 132, 1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(255, 159, 64, 1)',
                                'rgba(128, 0, 128, 1)',
                            ],
                        }]
                    },
                    options: {
                        tooltipTemplate: "<%= value %>",

                        showTooltips: true,

                        onAnimationComplete: function () {
                            this.showTooltip(this.datasets[0].points, true);
                        },
                        tooltipEvents: [],
                        responsive: true,
                        maintainAspectRatio: false,
                        width: 800,
                        height: 200,
                        plugins: {
                            legend: {
                                position: 'right', // Set the position of the legend
                                labels: {
                                    // Generate labels that include the category description and the total ticket value
                                    generateLabels: function (chart) {
                                        const data = chart.data.datasets[0].data;
                                        const labels = chart.data.labels;

                                        return labels.map((label, index) => {
                                            return {
                                                text: `${label} - ${data[index]}`, // Display category description and total ticket value
                                                fillStyle: chart.data.datasets[0].backgroundColor[index],
                                            };
                                        });
                                    },
                                },
                            },
                        },
                    },
                });


                myChartcomplaints = new Chart(ctxcomplaints, {
                    type: 'bar',
                    data: {
                        labels: chartDatacomplaints.map(item => item.issueTypeDescription),
                        datasets: [{
                            label: 'Total Tickets',
                            data: chartDatacomplaints.map(item => item.totalTicket),
                            borderWidth: 1,
                            backgroundColor: commonBarColors[1], // Bar fill color
                            borderColor: commonBorderColors[1], // Bar border color
                            barPercentage: 0.5,
                            minBarLength: 5,
                        }]
                    },
                    options: {
                        //indexAxis: 'y',
                        scales: {
                            y: {
                                ticks: {
                                    stepSize: 1, // Customize the tick interval on the y-axis
                                },
                                beginAtZero: true
                            }
                        }
                    }
                });
                myChartinfo = new Chart(ctxproduct, {
                    type: 'bar',
                    data: {
                        labels: chartDataproducts.map(item => item.products),
                        datasets: [{
                            label: 'Total Tickets',
                            data: chartDataproducts.map(item => item.totalTicket),
                            borderWidth: 1,
                            backgroundColor: commonBarColors[1], // Bar fill color
                            borderColor: commonBorderColors[1], // Bar bor....der color
                            barPercentage: 0.5,
                            minBarLength: 5,
                        }]
                    },
                    options: {
                        //indexAxis: 'y',
                        scales: {
                            y: {
                                ticks: {
                                    stepSize: 1, // Customize the tick interval on the y-axis
                                },
                                beginAtZero: true
                            }
                        }
                    }
                });


                debugger





                myChartservicerequesttest = new Chart(ctxcomplaintspie, {
                    type: 'doughnut',
                    data: {
                        labels: chartDataComplaintspie.map(item => item.category),
                        datasets: [{
                            label: 'Total Tickets',
                            data: chartDataComplaintspie.map(item => item.totalTicket),
                            borderWidth: 1,
                            //backgroundColor: commonBarColors[2], // Bar fill color
                            // borderColor: commonBorderColors[2], // Bar bor....der color
                            // barPercentage: 0.5,
                            // minBarLength: 5,
                        }]
                    },
                    options: {

                        responsive: true,
                        maintainAspectRatio: false,
                        width: 800,
                        height: 200,
                        plugins: {
                            legend: {
                                position: 'right', // Set the position of the legend
                                labels: {
                                    // Generate labels that include the category description and the total ticket value
                                    generateLabels: function (chart) {
                                        const data = chart.data.datasets[0].data;
                                        const labels = chart.data.labels;

                                        return labels.map((label, index) => {
                                            return {
                                                text: `${label} - ${data[index]}`, // Display category description and total ticket value
                                                fillStyle: chart.data.datasets[0].backgroundColor[index],
                                            };
                                        });
                                    },
                                },
                            },
                        },
                    },
                });





                debugger



            })
            .catch(error => {
                debugger

                // Show SweetAlert error message
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'An error occurred while fetching data "' + error + '"',
                });

                //Swal.fire('Error', 'Error fetching data: ' + error, 'error');
            });
    }
</script>


















